<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LYZ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-28T12:56:10.062Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李煜哲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux_基础命令</title>
    <link href="http://yoursite.com/2018/09/28/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/09/28/Linux-基础命令/</id>
    <published>2018-09-28T12:48:40.000Z</published>
    <updated>2018-09-28T12:56:10.062Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>链表的基本操作</title>
    <link href="http://yoursite.com/2018/09/09/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/09/09/链表的基本操作/</id>
    <published>2018-09-09T07:28:40.000Z</published>
    <updated>2018-09-28T12:44:53.519Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote><p>本文中主要分析以下几个链表：</p><p>不带头节点的单链表、带头节点的双向循环链表</p></blockquote><blockquote><h6 id="链表：一种链式存储的线性表，用一组地址任意的存储单元存放线性表的数据元素，称存储单元为一个节点"><a href="#链表：一种链式存储的线性表，用一组地址任意的存储单元存放线性表的数据元素，称存储单元为一个节点" class="headerlink" title="链表：一种链式存储的线性表，用一组地址任意的存储单元存放线性表的数据元素，称存储单元为一个节点"></a>链表：一种链式存储的线性表，用一组地址任意的存储单元存放线性表的数据元素，称存储单元为一个节点</h6></blockquote><h6 id="链表分类"><a href="#链表分类" class="headerlink" title="链表分类"></a>链表分类</h6><blockquote><p>1.单/双链表</p><p>2.带/不带头节点</p><p>3.循环/不循环链表</p></blockquote><p><img src="/img/List/1.jpg" alt="avatar"></p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><blockquote><h6 id="基本操作：初始化、销毁、插、删、查"><a href="#基本操作：初始化、销毁、插、删、查" class="headerlink" title="基本操作：初始化、销毁、插、删、查"></a>基本操作：初始化、销毁、插、删、查</h6><p>在删除和插入中分：头删/插、尾删/插、正常删/插</p></blockquote><ul><li style="list-style: none"><input type="checkbox"> 定义结构体</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef int DataType;</span><br><span class="line"></span><br><span class="line">typedef struct ListNode</span><br><span class="line">&#123;</span><br><span class="line">    DataType data;</span><br><span class="line">    struct ListNode* next;</span><br><span class="line">&#125; ListNode;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void ListInit(ListNode **ppfirst)</span><br><span class="line">&#123;</span><br><span class="line">    assert(*ppfirst!=NULL);</span><br><span class="line">    *ppfirst = NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 销毁</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void DestroyList(ListNode **ppfirst)</span><br><span class="line">&#123;</span><br><span class="line">    ListNode *next = *ppfirst;</span><br><span class="line">    for(ListNode *cur = *ppfirst;cur!=NULL;cur = next)</span><br><span class="line">    &#123;</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">        free(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    *ppfirst = NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 创建节点</li></ul><p><img src="/img/List/2.jpg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ListNode* CreatNode(DateType data)</span><br><span class="line">&#123;</span><br><span class="line">    ListNode* newnode = (ListNode*)malloc(sizeof(ListNode));</span><br><span class="line">    assert(newnode);</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = NULL;</span><br><span class="line">    </span><br><span class="line">    return newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 插入</li></ul><blockquote><h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><p>正常情况：从堆上申请空间，更改ppfirst的值</p><p>特殊情况：*ppfirst == NULL</p></blockquote><ul><li>头插</li></ul><p><img src="/img/List/3.jpg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void ListPushFront(ListNode **ppfirst, DataType data)</span><br><span class="line">&#123;</span><br><span class="line">    assert(ppfirst != NULL);</span><br><span class="line">    ListNode* node = CreatNode(data);</span><br><span class="line">    node-&gt;next = *ppfirst;</span><br><span class="line">    </span><br><span class="line">    *ppfirst = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>尾插（遍历链表）</li></ul><p><img src="/img/List/4.jpg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void ListPushBack(ListNode **ppfirst, DataType data)</span><br><span class="line">&#123;</span><br><span class="line">    ListNode* node = CreatNode(data);</span><br><span class="line">    //特殊情况 链表为空</span><br><span class="line">    if(*ppfirst == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        *ppfirst = node;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //正常情况</span><br><span class="line">    ListNode *cur = *ppfirst;</span><br><span class="line">    while(cur != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur-&gt;next = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>正常插入（中插）</li></ul><blockquote><h6 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h6><ol><li>如果要插入的位置是第一个节点—&gt;调用头插</li><li>找到要插入的位置的前一个节点，插入</li></ol></blockquote><p><img src="/img/List/5.jpg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void ListInsert(ListNode **ppfirst, ListNode *pos, DataType data)</span><br><span class="line">&#123;</span><br><span class="line">    //pos是第一个节点</span><br><span class="line">    if(*ppfirst == pos)</span><br><span class="line">    &#123;</span><br><span class="line">        ListPushFront(ppfirst,data);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //找到pos前一个节点</span><br><span class="line">    ListNode *cur = *ppfirst;</span><br><span class="line">    while(cur-&gt;next != pos)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode *node = CreatNode(data);</span><br><span class="line">    node-&gt;next = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>[ ] 删除</p></li><li><p>头删</p></li></ul><blockquote><h6 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h6><ol><li>变量地址不为空</li><li>不能为空链表</li></ol></blockquote><p><img src="/img/List/6.jpg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void ListPopFront(ListNode **ppfirst)</span><br><span class="line">&#123;</span><br><span class="line">    assert(ppfirst != NULL);</span><br><span class="line">    assert(*ppfirst != NULL);</span><br><span class="line">    ListNode *del = *ppfirst;</span><br><span class="line">    *ppfirst = del-&gt;next;</span><br><span class="line">    free(del);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>尾删</li></ul><blockquote><h6 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h6><ol><li>cur-&gt;next-&gt;next == NULL</li><li>特殊：只有一个节点</li></ol></blockquote><p><img src="/img/List/7.jpg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void ListPopBack(ListNode **ppfirst)</span><br><span class="line">&#123;</span><br><span class="line">    assert(ppfirst != NULL);</span><br><span class="line">    assert(*ppfirst != NULL);</span><br><span class="line">    //只有一个节点</span><br><span class="line">    if((*ppfirst)-&gt;next == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        free(*ppfirst);</span><br><span class="line">        *ppfirst = NULL;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode *cur = *ppfirst;</span><br><span class="line">    ListNode *del;</span><br><span class="line">    while(cur-&gt;next-&gt;next != NULL);</span><br><span class="line">    &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    del = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = NULL;</span><br><span class="line">    free(del);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 正常删除（中删）</li></ul><blockquote><h6 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h6><ol><li>当要删除的是第一个节点时—&gt;头删</li><li>先找到要删除的节点的前一个节点，然后删除</li></ol></blockquote><p><img src="/img/List/8.jpg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void ListEarse(ListNode **ppfirst, ListNode *pos)</span><br><span class="line">&#123;</span><br><span class="line">    assert(ppfirst != NULL);</span><br><span class="line">    assert(*ppfirst != NULL);</span><br><span class="line">    if((*ppfirst)-&gt;next == pos)</span><br><span class="line">    &#123;</span><br><span class="line">        ListPopFront(ppfirst);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode *cur = *ppfirst;</span><br><span class="line">    while(cur-&gt;next != pos)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur-&gt;next = pos-&gt;next;</span><br><span class="line">    free(pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 查找</li></ul><blockquote><h6 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h6><ol><li>遍历链表</li><li>传值</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ListNode* ListFind(ListNode* first, DataType data)</span><br><span class="line">&#123;</span><br><span class="line">    assert(first);</span><br><span class="line">    for(ListNode *cur = first; cur != NULL; cur = cur-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        if(cur-&gt;data == data)</span><br><span class="line">        &#123;</span><br><span class="line">            return cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向带头循环链表"><a href="#双向带头循环链表" class="headerlink" title="双向带头循环链表"></a>双向带头循环链表</h3><blockquote><h6 id="基本操作：初始化、销毁（删除带头节点）、清空（保留带头节点）、插、删"><a href="#基本操作：初始化、销毁（删除带头节点）、清空（保留带头节点）、插、删" class="headerlink" title="基本操作：初始化、销毁（删除带头节点）、清空（保留带头节点）、插、删"></a>基本操作：初始化、销毁（删除带头节点）、清空（保留带头节点）、插、删</h6><p>在删除和插入中分：头删/插、尾删/插、正常删/插</p></blockquote><ul><li><p>[ ] 定义结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct DListNode</span><br><span class="line">&#123;</span><br><span class="line">int data;</span><br><span class="line">struct DListNode *prev;</span><br><span class="line">struct DListNode *next;</span><br><span class="line">&#125; DListNode;</span><br></pre></td></tr></table></figure></li><li><p>[ ] 初始化<br><img src="/img/List/9.jpg" alt="avatar"></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void DListInit(DListNode **ppHead)</span><br><span class="line">&#123;</span><br><span class="line">    assert(ppHead != NULL);</span><br><span class="line">    DListNode *pHead = (DListNOde*)malloc(sizeof(DListNode));</span><br><span class="line">    pHead-&gt;prev = pHead;</span><br><span class="line">    pHead-&gt;next = pHead;</span><br><span class="line">    </span><br><span class="line">    *ppHead = pHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 清空链表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void DListClear(DListNode *pHead)</span><br><span class="line">&#123;</span><br><span class="line">    DListNode *cur = pHead-&gt;next;</span><br><span class="line">    DListNode *next;</span><br><span class="line">    while(cur != pHead)</span><br><span class="line">    &#123;</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">        free(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    pHead-&gt;next = pHead;</span><br><span class="line">pHead-&gt;prev = pHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 销毁</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void DListDestroy(DListNode **ppHead)</span><br><span class="line">&#123;</span><br><span class="line">    assert(ppHead != NULL);</span><br><span class="line">    DListClear(*ppHead);</span><br><span class="line">    free(*ppHead);</span><br><span class="line">    *ppHead = NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>[ ] 插入</p></li><li><p>正常插入<br><img src="/img/List/10.jpg" alt="avatar"></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void DListInsert(DListNode *pHead, DListNode *pos, int data)</span><br><span class="line">&#123;</span><br><span class="line">    (void)pHead;//仅仅是为了防止编译警告</span><br><span class="line">    DListNode *node = (DListNOde*)malloc(sizeof(DListNode));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    </span><br><span class="line">    node-&gt;prev = pos-&gt;prev;</span><br><span class="line">node-&gt;next = pos;</span><br><span class="line">pos-&gt;prev-&gt;next = node;</span><br><span class="line">pos-&gt;prev = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>头插</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void DListPushFront(DListNode *pHead, int data)</span><br><span class="line">&#123;</span><br><span class="line">    DListInsert(pHead, pHead-&gt;next, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>尾插</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void DListPushBack(DListNode *pHead, int data)</span><br><span class="line">&#123;</span><br><span class="line">    DListInsert(pHead,pHead,data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>[ ] 删除<br><img src="/img/List/11.jpg" alt="avatar"></p></li><li><p>正常删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void DListErase(DListNode *pHead, DListNode *pos)</span><br><span class="line">&#123;</span><br><span class="line">    (void)pHead;</span><br><span class="line">    assert(pHead != NULL);</span><br><span class="line">    pos-&gt;prev-&gt;next = pos-&gt;next;</span><br><span class="line">    pos-&gt;next-&gt;prev = pos-&gt;prev;</span><br><span class="line">    </span><br><span class="line">    free(pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>头删</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void DListPopFront(DListNode *pHead)</span><br><span class="line">&#123;</span><br><span class="line">DListErase(pHead,pHead-&gt;next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>尾删</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void DListPopBack(DListNode *pHead)</span><br><span class="line">&#123;</span><br><span class="line">DListErase(pHead, pHead-&gt;prev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;本文中主要分析以下几个链表：&lt;/p&gt;
&lt;p&gt;不带头节点的单链表、带头节点的双向
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>结构体</title>
    <link href="http://yoursite.com/2018/09/09/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>http://yoursite.com/2018/09/09/结构体/</id>
    <published>2018-09-09T07:28:40.000Z</published>
    <updated>2018-09-29T06:46:28.099Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul><li>结构体的声明</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct tag  //结构体类型，tag 结构体标签</span><br><span class="line">&#123;</span><br><span class="line">    member-list;</span><br><span class="line">&#125;variable-list;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 特殊的声明：省略结构体标签（tag）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct</span><br><span class="line">&#123;</span><br><span class="line">  int a;</span><br><span class="line">  char b;</span><br><span class="line">  float c;</span><br><span class="line">&#125;x;</span><br><span class="line"></span><br><span class="line">struct</span><br><span class="line">&#123;</span><br><span class="line">  int a;</span><br><span class="line">  char b;</span><br><span class="line">  float c;</span><br><span class="line">&#125;a[20],*p;</span><br></pre></td></tr></table></figure><ul><li><p>[ ] 结构体成员</p><blockquote><p>可以是标量、数组、指针，甚至是其它结构体</p></blockquote></li><li><p>[ ] 访问结构体成员</p><blockquote><p>结构体变量访问成员：结构变量的成员是通过点操作符访问的。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct Stu</span><br><span class="line">&#123;</span><br><span class="line">  char name[20];</span><br><span class="line">  int age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct Stu s;  //定义结构体变量</span><br><span class="line">    strcpy(s.name,&quot;zhangsan&quot;);</span><br><span class="line">    s.age = 20;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体访问指针变量的成员</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct S</span><br><span class="line">&#123;</span><br><span class="line">   char name[20];</span><br><span class="line">   int age;</span><br><span class="line">&#125;s;</span><br><span class="line"></span><br><span class="line">void print(struct S* ps)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%s %d&quot;,(*ps).name,(*ps).age);</span><br><span class="line">    printf(&quot;%s %d&quot;,ps-&gt;name,ps-&gt;age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 结构体的自引用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//eg1</span><br><span class="line">struct Node</span><br><span class="line">&#123;</span><br><span class="line">  int data;</span><br><span class="line">  struct Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//eg2</span><br><span class="line">typedef struct Node</span><br><span class="line">&#123;</span><br><span class="line">  int data;</span><br><span class="line">  struct Node* next;</span><br><span class="line">&#125;Node;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 结构的不完整声明</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct B；//在A中B还没有定义，所以必须要在A前声明B</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">   int a;</span><br><span class="line">   struct B* pb;</span><br><span class="line">&#125;;</span><br><span class="line">struct B</span><br><span class="line">&#123;</span><br><span class="line">  int b;</span><br><span class="line">  struct A* pa;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>结构体变量的定义和初始化</p></li><li><p>[ ] 变量的定义</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct Point</span><br><span class="line">&#123;</span><br><span class="line">  int x;</span><br><span class="line">  int y;</span><br><span class="line">&#125;p1;  //声明类型同时定义变量p1</span><br><span class="line"></span><br><span class="line">struct Point p2;//定义结构体变量p2</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct Stu</span><br><span class="line">&#123;</span><br><span class="line">  char name[15];</span><br><span class="line">  int age;</span><br><span class="line">&#125;;</span><br><span class="line">//初始化</span><br><span class="line">struct Stu s = &#123;&quot;zhangsan&quot;,20&#125;;</span><br><span class="line">//结构体嵌套初始化</span><br><span class="line">struct Node</span><br><span class="line">&#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct Stu s;</span><br><span class="line">    struct Node* next;</span><br><span class="line">&#125;n1 = &#123;10,&#123;&quot;lisi&quot;,19&#125;,NULL&#125;;</span><br></pre></td></tr></table></figure><ul><li>结构体传参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">struct S</span><br><span class="line">&#123;</span><br><span class="line">    int data[100];</span><br><span class="line">    int num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct S s = &#123;&#123;1,2,3,4&#125;,1000&#125;;</span><br><span class="line">//结构体传参</span><br><span class="line">void print1(struct S s)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,s.num);</span><br><span class="line">&#125;</span><br><span class="line">//结构体地址传参</span><br><span class="line">void print2(struct S* ps)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,ps-&gt;num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    print1(s);</span><br><span class="line">    print2(&amp;s);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数传参的时候参数是需要压栈的，如果传递结构体对象的时候，结构体过大，压栈时系统开销大，会导致性能下降，所以选择传址</p><ul><li>结构体内存对齐</li></ul></blockquote><blockquote><p>结构体的内存对齐是拿空间换取时间的做法</p><ul><li style="list-style: none"><input type="checkbox"> 结构体的对齐规则</li></ul><ol><li>第一个成员在与结构体变量偏移量为0的地址处</li><li>其他成员变量要对齐到对齐数的整数倍的地址处。对齐数 = 编译器默认的一个对齐数 与 该成员大小的较小值。VS中默认为8，Linux中默认为4</li><li>结构体总大小为最大对齐数的整数倍</li><li>如果嵌套了结构体，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数的整数倍</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">struct S1</span><br><span class="line">&#123;</span><br><span class="line">char c1;</span><br><span class="line">int i;</span><br><span class="line">char c2;</span><br><span class="line">&#125;;</span><br><span class="line">struct S2</span><br><span class="line">&#123;</span><br><span class="line">char c1;</span><br><span class="line">char c2;</span><br><span class="line">int i;</span><br><span class="line">&#125;;</span><br><span class="line">struct S3</span><br><span class="line">&#123;</span><br><span class="line">double d;</span><br><span class="line">char c;</span><br><span class="line">int i;</span><br><span class="line">&#125;;</span><br><span class="line">//结构体的嵌套</span><br><span class="line">struct S4</span><br><span class="line">&#123;</span><br><span class="line">char c1;</span><br><span class="line">struct S3 s3;</span><br><span class="line">double d;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d\n&quot;, sizeof(struct S1));</span><br><span class="line">printf(&quot;%d\n&quot;, sizeof(struct S2));</span><br><span class="line">printf(&quot;%d\n&quot;, sizeof(struct S3));</span><br><span class="line">printf(&quot;%d\n&quot;, sizeof(struct S4));</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：image</p><p>这里只对S4进行分析</p><p>如图：</p><blockquote><p>在设计结构体的时候，我们既要满足对其又要节省空间，所以让占用空间小的成员尽量集中在一起</p></blockquote><ul><li>位段</li></ul><blockquote><p>位段的声明与结构体类似，但有两处不同</p><ol><li>位段的成员必须是int、unsigned int、signed int</li><li>位段的成员名后面有一个冒号和一个数字</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    int _a:2;</span><br><span class="line">    int _b:5;</span><br><span class="line">    int _c:10;</span><br><span class="line">    int _d:30;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(struct A));  //8</span><br></pre></td></tr></table></figure><blockquote><p>冒号后边的数字为比特位</p></blockquote><ul><li style="list-style: none"><input type="checkbox"> 接下来分析下位段的空间是如何开辟的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">struct S</span><br><span class="line">&#123;</span><br><span class="line">char a : 3;</span><br><span class="line">char b : 4;</span><br><span class="line">char c : 5;</span><br><span class="line">char d : 4;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">struct S s = &#123;0&#125;;</span><br><span class="line">s.a = 10;</span><br><span class="line">s.b = 12;</span><br><span class="line">s.c = 3;</span><br><span class="line">s.d = 4;</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(struct S));//3</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：所示</p><ul><li><p>[ ] 位段的内存分配</p><blockquote><ol><li>位段的成员可以是int、unsigned int、signed int或者是char类型</li><li>位段设计很多不确定因素，且是不跨平台的，注意可移植程序避免使用位段</li></ol></blockquote></li><li><p>[ ] 位段的跨平台问题</p><blockquote><ol><li>int位段被当成有符号还是无符号数不确定</li><li>位段中最大位的数目不确定。（16位机器最大16,32位机器最大32）</li><li>位段中的成员在内存中从左向右还是从右向左分配未定义</li><li>当一个结构包含两个位段，第二个位段成员比较大，无法容纳第一个位段剩余位时，舍弃剩余位还是利用剩余位，不确定</li></ol></blockquote></li></ul><h2 id="枚举（一一列举）"><a href="#枚举（一一列举）" class="headerlink" title="枚举（一一列举）"></a>枚举（一一列举）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enum Day</span><br><span class="line">&#123;</span><br><span class="line">    //枚举常量</span><br><span class="line">    MON,</span><br><span class="line">    TUE,</span><br><span class="line">    WED,</span><br><span class="line">    THUR,</span><br><span class="line">    FRI,</span><br><span class="line">    SAT,</span><br><span class="line">    SUN</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>枚举常量的值默认从0开始，依次递增1，在定义时也可以赋初值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Color</span><br><span class="line">&#123;</span><br><span class="line">    RED = 1,</span><br><span class="line">    GREEN = 3,</span><br><span class="line">    BLUE = 4</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 枚举的优点<blockquote><ol><li>增加代码的可读性和可维护性</li><li>枚举有类型检查，更加严谨（只能拿枚举常量给枚举变量赋值，这样不会出现类型的差异）</li><li>防止命名污染，便与调试，一次可定义多个常量</li></ol></blockquote></li></ul><h2 id="联合（共用体）"><a href="#联合（共用体）" class="headerlink" title="联合（共用体）"></a>联合（共用体）</h2><ul><li style="list-style: none"><input type="checkbox"> 联合类型的定义<blockquote><p>联合类型的定义的成员共用同一块空间</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">union Un</span><br><span class="line">&#123;</span><br><span class="line">    char c;</span><br><span class="line">    int i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(union Un));//4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//联合的特点：成员共用同一块空间</span><br><span class="line">union Un</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    char c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">union Un un;</span><br><span class="line">printf(&quot;%d\n&quot;,&amp;(un.i));</span><br><span class="line">printf(&quot;%d\n&quot;,&amp;(un.c));</span><br></pre></td></tr></table></figure><p>123</p><ul><li style="list-style: none"><input type="checkbox"> 联合大小的计算<blockquote><ol><li>联合的大小至少是最大成员的大小</li><li>当最大成员大小不是最大对齐数的整数倍时，就要对齐到最大对齐数的整数倍</li></ol></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">union U1</span><br><span class="line">&#123;</span><br><span class="line">    char c[5];</span><br><span class="line">    int i;</span><br><span class="line">&#125;;</span><br><span class="line">union U2</span><br><span class="line">&#123;</span><br><span class="line">    short c[7];</span><br><span class="line">    int i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(union U1));//8</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(union U2));//16</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 联合的一些应用<blockquote><p>判断大小端存储</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int check_sys()</span><br><span class="line">&#123;</span><br><span class="line">    union</span><br><span class="line">    &#123;</span><br><span class="line">        int i;</span><br><span class="line">        char c;</span><br><span class="line">    &#125;un;</span><br><span class="line">    un.i = 1;</span><br><span class="line">    return un.c;</span><br><span class="line">    //返回1小端存储，返回0大端存储</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>联合和结构体的使用（IP地址）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//将long类型的IP地址转换为点分10进制的表示形式</span><br><span class="line">union ip_addr</span><br><span class="line">&#123;</span><br><span class="line">    unsigned long addr;</span><br><span class="line">    struct</span><br><span class="line">    &#123;</span><br><span class="line">        unsigned char c1;</span><br><span class="line">        unsigned char c2;</span><br><span class="line">        unsigned char c3;</span><br><span class="line">        unsigned char c4;</span><br><span class="line">    &#125;ip;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    union ip_addr my_ip;</span><br><span class="line">    my_ip.addr = 123456789;</span><br><span class="line">    printf(&quot;%d.%d.%d.%d\n&quot;,my_ip.ip.c4,my_ip.ip.c3,my_ip.ip.c2,my_ip.ip.c1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;结构体的声明&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
